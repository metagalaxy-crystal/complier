state 0	input Func
shift state 1

state 0	input FuncDecl
shift state 2

state 0	input FuncDef
shift state 3

state 0	input Type
shift state 4

state 0	input int
shift state 5

state 0	input sentence
shift state 6

state 0	input void
shift state 7

state 1	input $
reduction sentence->Func 

state 1	input Func
shift state 1

state 1	input FuncDecl
shift state 2

state 1	input FuncDef
shift state 3

state 1	input Type
shift state 4

state 1	input int
shift state 5

state 1	input sentence
shift state 8

state 1	input void
shift state 7

state 2	input $
reduction Func->FuncDecl 

state 2	input int
reduction Func->FuncDecl 

state 2	input void
reduction Func->FuncDecl 

state 3	input $
reduction Func->FuncDef 

state 3	input int
reduction Func->FuncDef 

state 3	input void
reduction Func->FuncDef 

state 4	input Identifier
shift state 9

state 5	input Identifier
reduction Type->int 

state 6	input $
reduction start->sentence 

state 7	input Identifier
reduction Type->void 

state 8	input $
reduction sentence->Func sentence 

state 9	input (
shift state 10

state 10	input )
shift state 11

state 10	input FuncParam
shift state 12

state 10	input Type
shift state 13

state 10	input int
shift state 5

state 10	input void
shift state 7

state 11	input ;
shift state 14

state 11	input Block
shift state 15

state 11	input {
shift state 16

state 12	input )
shift state 17

state 13	input Identifier
shift state 18

state 14	input $
reduction FuncDecl->Type Identifier ( ) ; 

state 14	input int
reduction FuncDecl->Type Identifier ( ) ; 

state 14	input void
reduction FuncDecl->Type Identifier ( ) ; 

state 15	input $
reduction FuncDef->Type Identifier ( ) Block 

state 15	input int
reduction FuncDef->Type Identifier ( ) Block 

state 15	input void
reduction FuncDef->Type Identifier ( ) Block 

state 16	input ;
shift state 19

state 16	input Block
shift state 20

state 16	input BlockItem
shift state 21

state 16	input Identifier
shift state 22

state 16	input Stmt
shift state 23

state 16	input Type
shift state 24

state 16	input VarAssign
shift state 25

state 16	input VarDecl
shift state 26

state 16	input VarDef
shift state 27

state 16	input VarStmt
shift state 28

state 16	input break
shift state 29

state 16	input continue
shift state 30

state 16	input if
shift state 31

state 16	input int
shift state 5

state 16	input return
shift state 32

state 16	input void
shift state 7

state 16	input while
shift state 33

state 16	input {
shift state 34

state 17	input ;
shift state 35

state 17	input Block
shift state 36

state 17	input {
shift state 16

state 18	input )
reduction FuncParam->Type Identifier 

state 18	input ,
shift state 37

state 19	input }
reduction Stmt->; 

state 20	input ;
shift state 19

state 20	input Block
shift state 20

state 20	input Identifier
shift state 22

state 20	input Stmt
shift state 38

state 20	input Type
shift state 24

state 20	input VarAssign
shift state 39

state 20	input VarDecl
shift state 26

state 20	input VarDef
shift state 40

state 20	input VarStmt
shift state 28

state 20	input break
shift state 29

state 20	input continue
shift state 30

state 20	input if
shift state 31

state 20	input int
shift state 5

state 20	input return
shift state 32

state 20	input void
shift state 7

state 20	input while
shift state 33

state 20	input {
shift state 34

state 20	input }
reduction Stmt->Block 

state 21	input }
shift state 41

state 22	input =
shift state 42

state 23	input }
reduction BlockItem->Stmt 

state 24	input Identifier
shift state 43

state 25	input ;
reduction VarStmt->VarAssign 

state 25	input Identifier
reduction VarStmt->VarAssign 

state 25	input break
reduction VarStmt->VarAssign 

state 25	input continue
reduction VarStmt->VarAssign 

state 25	input if
reduction VarStmt->VarAssign 

state 25	input int
reduction VarStmt->VarAssign 

state 25	input return
reduction VarStmt->VarAssign 

state 25	input void
reduction VarStmt->VarAssign 

state 25	input while
reduction VarStmt->VarAssign 

state 25	input {
reduction VarStmt->VarAssign 

state 25	input }
reduction VarStmt->VarAssign 

state 26	input ;
reduction VarStmt->VarDecl 

state 26	input Identifier
reduction VarStmt->VarDecl 

state 26	input break
reduction VarStmt->VarDecl 

state 26	input continue
reduction VarStmt->VarDecl 

state 26	input if
reduction VarStmt->VarDecl 

state 26	input int
reduction VarStmt->VarDecl 

state 26	input return
reduction VarStmt->VarDecl 

state 26	input void
reduction VarStmt->VarDecl 

state 26	input while
reduction VarStmt->VarDecl 

state 26	input {
reduction VarStmt->VarDecl 

state 26	input }
reduction VarStmt->VarDecl 

state 27	input ;
reduction VarStmt->VarDef 

state 27	input Identifier
reduction VarStmt->VarDef 

state 27	input break
reduction VarStmt->VarDef 

state 27	input continue
reduction VarStmt->VarDef 

state 27	input if
reduction VarStmt->VarDef 

state 27	input int
reduction VarStmt->VarDef 

state 27	input return
reduction VarStmt->VarDef 

state 27	input void
reduction VarStmt->VarDef 

state 27	input while
reduction VarStmt->VarDef 

state 27	input {
reduction VarStmt->VarDef 

state 27	input }
reduction VarStmt->VarDef 

state 28	input ;
shift state 19

state 28	input Block
shift state 20

state 28	input Identifier
shift state 22

state 28	input Stmt
shift state 44

state 28	input Type
shift state 24

state 28	input VarAssign
shift state 39

state 28	input VarDecl
shift state 26

state 28	input VarDef
shift state 40

state 28	input VarStmt
shift state 28

state 28	input break
shift state 29

state 28	input continue
shift state 30

state 28	input if
shift state 31

state 28	input int
shift state 5

state 28	input return
shift state 32

state 28	input void
shift state 7

state 28	input while
shift state 33

state 28	input {
shift state 34

state 28	input }
reduction Stmt->VarStmt 

state 29	input ;
shift state 45

state 30	input ;
shift state 46

state 31	input (
shift state 47

state 32	input (
shift state 48

state 32	input ;
shift state 49

state 32	input Digits
shift state 50

state 32	input EqualExpr
shift state 51

state 32	input Expr
shift state 52

state 32	input Factor
shift state 53

state 32	input Identifier
shift state 54

state 32	input OperationExpr
shift state 55

state 32	input RelationExpr
shift state 56

state 32	input Term
shift state 57

state 32	input UnequalExpr
shift state 58

state 33	input (
shift state 59

state 34	input ;
shift state 19

state 34	input Block
shift state 20

state 34	input BlockItem
shift state 60

state 34	input Identifier
shift state 22

state 34	input Stmt
shift state 23

state 34	input Type
shift state 24

state 34	input VarAssign
shift state 25

state 34	input VarDecl
shift state 26

state 34	input VarDef
shift state 27

state 34	input VarStmt
shift state 28

state 34	input break
shift state 29

state 34	input continue
shift state 30

state 34	input if
shift state 31

state 34	input int
shift state 5

state 34	input return
shift state 32

state 34	input void
shift state 7

state 34	input while
shift state 33

state 34	input {
shift state 34

state 35	input $
reduction FuncDecl->Type Identifier ( FuncParam ) ; 

state 35	input int
reduction FuncDecl->Type Identifier ( FuncParam ) ; 

state 35	input void
reduction FuncDecl->Type Identifier ( FuncParam ) ; 

state 36	input $
reduction FuncDef->Type Identifier ( FuncParam ) Block 

state 36	input int
reduction FuncDef->Type Identifier ( FuncParam ) Block 

state 36	input void
reduction FuncDef->Type Identifier ( FuncParam ) Block 

state 37	input FuncParam
shift state 61

state 37	input Type
shift state 13

state 37	input int
shift state 5

state 37	input void
shift state 7

state 38	input }
reduction Stmt->Block Stmt 

state 39	input ;
reduction VarStmt->VarAssign 

state 39	input Identifier
reduction VarStmt->VarAssign 

state 39	input break
reduction VarStmt->VarAssign 

state 39	input continue
reduction VarStmt->VarAssign 

state 39	input if
reduction VarStmt->VarAssign 

state 39	input int
reduction VarStmt->VarAssign 

state 39	input return
reduction VarStmt->VarAssign 

state 39	input void
reduction VarStmt->VarAssign 

state 39	input while
reduction VarStmt->VarAssign 

state 39	input {
reduction VarStmt->VarAssign 

state 39	input }
reduction VarStmt->VarAssign 

state 40	input ;
reduction VarStmt->VarDef 

state 40	input Identifier
reduction VarStmt->VarDef 

state 40	input break
reduction VarStmt->VarDef 

state 40	input continue
reduction VarStmt->VarDef 

state 40	input if
reduction VarStmt->VarDef 

state 40	input int
reduction VarStmt->VarDef 

state 40	input return
reduction VarStmt->VarDef 

state 40	input void
reduction VarStmt->VarDef 

state 40	input while
reduction VarStmt->VarDef 

state 40	input {
reduction VarStmt->VarDef 

state 40	input }
reduction VarStmt->VarDef 

state 41	input $
reduction Block->{ BlockItem } 

state 41	input int
reduction Block->{ BlockItem } 

state 41	input void
reduction Block->{ BlockItem } 

state 42	input (
shift state 48

state 42	input Digits
shift state 50

state 42	input EqualExpr
shift state 51

state 42	input Expr
shift state 62

state 42	input Factor
shift state 53

state 42	input Identifier
shift state 54

state 42	input OperationExpr
shift state 55

state 42	input RelationExpr
shift state 56

state 42	input Term
shift state 57

state 42	input UnequalExpr
shift state 58

state 43	input ;
shift state 63

state 43	input =
shift state 64

state 44	input }
reduction Stmt->VarStmt Stmt 

state 45	input }
reduction Stmt->break ; 

state 46	input }
reduction Stmt->continue ; 

state 47	input (
shift state 65

state 47	input Digits
shift state 66

state 47	input EqualExpr
shift state 67

state 47	input Factor
shift state 68

state 47	input Identifier
shift state 69

state 47	input OperationExpr
shift state 70

state 47	input RelationExpr
shift state 71

state 47	input Term
shift state 72

state 47	input UnequalExpr
shift state 73

state 48	input (
shift state 74

state 48	input Digits
shift state 75

state 48	input Factor
shift state 76

state 48	input Identifier
shift state 77

state 48	input OperationExpr
shift state 78

state 48	input Term
shift state 79

state 49	input }
reduction Stmt->return ; 

state 50	input *
reduction Factor->Digits 

state 50	input +
reduction Factor->Digits 

state 50	input -
reduction Factor->Digits 

state 50	input /
reduction Factor->Digits 

state 50	input ;
reduction Factor->Digits 

state 51	input !=
shift state 80

state 51	input ;
reduction RelationExpr->EqualExpr 

state 51	input ==
shift state 81

state 52	input ;
shift state 82

state 53	input *
reduction Term->Factor 

state 53	input +
reduction Term->Factor 

state 53	input -
reduction Term->Factor 

state 53	input /
reduction Term->Factor 

state 53	input ;
reduction Term->Factor 

state 54	input (
shift state 83

state 54	input *
reduction Factor->Identifier 

state 54	input +
reduction Factor->Identifier 

state 54	input -
reduction Factor->Identifier 

state 54	input /
reduction Factor->Identifier 

state 54	input ;
reduction Factor->Identifier 

state 55	input !=
reduction UnequalExpr->OperationExpr 

state 55	input +
shift state 84

state 55	input -
shift state 85

state 55	input ;
reduction UnequalExpr->OperationExpr 

state 55	input <
reduction UnequalExpr->OperationExpr 

state 55	input <=
reduction UnequalExpr->OperationExpr 

state 55	input ==
reduction UnequalExpr->OperationExpr 

state 55	input >
reduction UnequalExpr->OperationExpr 

state 55	input >=
reduction UnequalExpr->OperationExpr 

state 56	input ;
reduction Expr->RelationExpr 

state 57	input *
shift state 86

state 57	input +
reduction OperationExpr->Term 

state 57	input -
reduction OperationExpr->Term 

state 57	input /
shift state 87

state 57	input ;
reduction OperationExpr->Term 

state 57	input <
reduction OperationExpr->Term 

state 57	input <=
reduction OperationExpr->Term 

state 57	input >
reduction OperationExpr->Term 

state 57	input >=
reduction OperationExpr->Term 

state 58	input !=
reduction EqualExpr->UnequalExpr 

state 58	input ;
reduction EqualExpr->UnequalExpr 

state 58	input <
shift state 88

state 58	input <=
shift state 89

state 58	input ==
reduction EqualExpr->UnequalExpr 

state 58	input >
shift state 90

state 58	input >=
shift state 91

state 59	input (
shift state 65

state 59	input Digits
shift state 66

state 59	input EqualExpr
shift state 67

state 59	input Factor
shift state 68

state 59	input Identifier
shift state 69

state 59	input OperationExpr
shift state 70

state 59	input RelationExpr
shift state 92

state 59	input Term
shift state 72

state 59	input UnequalExpr
shift state 73

state 60	input }
shift state 93

state 61	input )
reduction FuncParam->Type Identifier , FuncParam 

state 62	input ;
shift state 94

state 63	input ;
reduction VarDecl->Type Identifier ; 

state 63	input Identifier
reduction VarDecl->Type Identifier ; 

state 63	input break
reduction VarDecl->Type Identifier ; 

state 63	input continue
reduction VarDecl->Type Identifier ; 

state 63	input if
reduction VarDecl->Type Identifier ; 

state 63	input int
reduction VarDecl->Type Identifier ; 

state 63	input return
reduction VarDecl->Type Identifier ; 

state 63	input void
reduction VarDecl->Type Identifier ; 

state 63	input while
reduction VarDecl->Type Identifier ; 

state 63	input {
reduction VarDecl->Type Identifier ; 

state 63	input }
reduction VarDecl->Type Identifier ; 

state 64	input (
shift state 48

state 64	input Digits
shift state 50

state 64	input EqualExpr
shift state 51

state 64	input Expr
shift state 95

state 64	input Factor
shift state 53

state 64	input Identifier
shift state 54

state 64	input OperationExpr
shift state 55

state 64	input RelationExpr
shift state 56

state 64	input Term
shift state 57

state 64	input UnequalExpr
shift state 58

state 65	input (
shift state 74

state 65	input Digits
shift state 75

state 65	input Factor
shift state 76

state 65	input Identifier
shift state 77

state 65	input OperationExpr
shift state 96

state 65	input Term
shift state 79

state 66	input !=
reduction Factor->Digits 

state 66	input )
reduction Factor->Digits 

state 66	input *
reduction Factor->Digits 

state 66	input +
reduction Factor->Digits 

state 66	input -
reduction Factor->Digits 

state 66	input /
reduction Factor->Digits 

state 66	input <
reduction Factor->Digits 

state 66	input <=
reduction Factor->Digits 

state 66	input ==
reduction Factor->Digits 

state 66	input >
reduction Factor->Digits 

state 66	input >=
reduction Factor->Digits 

state 67	input !=
shift state 97

state 67	input )
reduction RelationExpr->EqualExpr 

state 67	input ==
shift state 98

state 68	input !=
reduction Term->Factor 

state 68	input )
reduction Term->Factor 

state 68	input *
reduction Term->Factor 

state 68	input +
reduction Term->Factor 

state 68	input -
reduction Term->Factor 

state 68	input /
reduction Term->Factor 

state 68	input <
reduction Term->Factor 

state 68	input <=
reduction Term->Factor 

state 68	input ==
reduction Term->Factor 

state 68	input >
reduction Term->Factor 

state 68	input >=
reduction Term->Factor 

state 69	input !=
reduction Factor->Identifier 

state 69	input )
reduction Factor->Identifier 

state 69	input *
reduction Factor->Identifier 

state 69	input +
reduction Factor->Identifier 

state 69	input -
reduction Factor->Identifier 

state 69	input /
reduction Factor->Identifier 

state 69	input <
reduction Factor->Identifier 

state 69	input <=
reduction Factor->Identifier 

state 69	input ==
reduction Factor->Identifier 

state 69	input >
reduction Factor->Identifier 

state 69	input >=
reduction Factor->Identifier 

state 70	input !=
reduction UnequalExpr->OperationExpr 

state 70	input )
reduction UnequalExpr->OperationExpr 

state 70	input +
shift state 99

state 70	input -
shift state 100

state 70	input <
reduction UnequalExpr->OperationExpr 

state 70	input <=
reduction UnequalExpr->OperationExpr 

state 70	input ==
reduction UnequalExpr->OperationExpr 

state 70	input >
reduction UnequalExpr->OperationExpr 

state 70	input >=
reduction UnequalExpr->OperationExpr 

state 71	input )
shift state 101

state 72	input !=
reduction OperationExpr->Term 

state 72	input )
reduction OperationExpr->Term 

state 72	input *
shift state 102

state 72	input +
reduction OperationExpr->Term 

state 72	input -
reduction OperationExpr->Term 

state 72	input /
shift state 103

state 72	input <
reduction OperationExpr->Term 

state 72	input <=
reduction OperationExpr->Term 

state 72	input ==
reduction OperationExpr->Term 

state 72	input >
reduction OperationExpr->Term 

state 72	input >=
reduction OperationExpr->Term 

state 73	input !=
reduction EqualExpr->UnequalExpr 

state 73	input )
reduction EqualExpr->UnequalExpr 

state 73	input <
shift state 104

state 73	input <=
shift state 105

state 73	input ==
reduction EqualExpr->UnequalExpr 

state 73	input >
shift state 106

state 73	input >=
shift state 107

state 74	input (
shift state 74

state 74	input Digits
shift state 75

state 74	input Factor
shift state 76

state 74	input Identifier
shift state 77

state 74	input OperationExpr
shift state 108

state 74	input Term
shift state 79

state 75	input )
reduction Factor->Digits 

state 75	input *
reduction Factor->Digits 

state 75	input +
reduction Factor->Digits 

state 75	input -
reduction Factor->Digits 

state 75	input /
reduction Factor->Digits 

state 76	input )
reduction Term->Factor 

state 76	input *
reduction Term->Factor 

state 76	input +
reduction Term->Factor 

state 76	input -
reduction Term->Factor 

state 76	input /
reduction Term->Factor 

state 77	input )
reduction Factor->Identifier 

state 77	input *
reduction Factor->Identifier 

state 77	input +
reduction Factor->Identifier 

state 77	input -
reduction Factor->Identifier 

state 77	input /
reduction Factor->Identifier 

state 78	input )
shift state 109

state 78	input +
shift state 110

state 78	input -
shift state 111

state 79	input )
reduction OperationExpr->Term 

state 79	input *
shift state 112

state 79	input +
reduction OperationExpr->Term 

state 79	input -
reduction OperationExpr->Term 

state 79	input /
shift state 113

state 80	input (
shift state 114

state 80	input Digits
shift state 115

state 80	input Factor
shift state 116

state 80	input Identifier
shift state 117

state 80	input OperationExpr
shift state 118

state 80	input Term
shift state 119

state 80	input UnequalExpr
shift state 120

state 81	input (
shift state 114

state 81	input Digits
shift state 115

state 81	input Factor
shift state 116

state 81	input Identifier
shift state 117

state 81	input OperationExpr
shift state 118

state 81	input Term
shift state 119

state 81	input UnequalExpr
shift state 121

state 82	input }
reduction Stmt->return Expr ; 

state 83	input )
shift state 122

state 83	input IdentList
shift state 123

state 83	input Identifier
shift state 124

state 84	input (
shift state 125

state 84	input Digits
shift state 126

state 84	input Factor
shift state 127

state 84	input Identifier
shift state 128

state 84	input Term
shift state 129

state 85	input (
shift state 125

state 85	input Digits
shift state 126

state 85	input Factor
shift state 127

state 85	input Identifier
shift state 128

state 85	input Term
shift state 130

state 86	input (
shift state 48

state 86	input Digits
shift state 50

state 86	input Factor
shift state 131

state 86	input Identifier
shift state 132

state 87	input (
shift state 48

state 87	input Digits
shift state 50

state 87	input Factor
shift state 133

state 87	input Identifier
shift state 132

state 88	input (
shift state 114

state 88	input Digits
shift state 115

state 88	input Factor
shift state 116

state 88	input Identifier
shift state 117

state 88	input OperationExpr
shift state 134

state 88	input Term
shift state 119

state 89	input (
shift state 114

state 89	input Digits
shift state 115

state 89	input Factor
shift state 116

state 89	input Identifier
shift state 117

state 89	input OperationExpr
shift state 135

state 89	input Term
shift state 119

state 90	input (
shift state 114

state 90	input Digits
shift state 115

state 90	input Factor
shift state 116

state 90	input Identifier
shift state 117

state 90	input OperationExpr
shift state 136

state 90	input Term
shift state 119

state 91	input (
shift state 114

state 91	input Digits
shift state 115

state 91	input Factor
shift state 116

state 91	input Identifier
shift state 117

state 91	input OperationExpr
shift state 137

state 91	input Term
shift state 119

state 92	input )
shift state 138

state 93	input ;
reduction Block->{ BlockItem } 

state 93	input Identifier
reduction Block->{ BlockItem } 

state 93	input break
reduction Block->{ BlockItem } 

state 93	input continue
reduction Block->{ BlockItem } 

state 93	input if
reduction Block->{ BlockItem } 

state 93	input int
reduction Block->{ BlockItem } 

state 93	input return
reduction Block->{ BlockItem } 

state 93	input void
reduction Block->{ BlockItem } 

state 93	input while
reduction Block->{ BlockItem } 

state 93	input {
reduction Block->{ BlockItem } 

state 93	input }
reduction Block->{ BlockItem } 

state 94	input ;
reduction VarAssign->Identifier = Expr ; 

state 94	input Identifier
reduction VarAssign->Identifier = Expr ; 

state 94	input break
reduction VarAssign->Identifier = Expr ; 

state 94	input continue
reduction VarAssign->Identifier = Expr ; 

state 94	input if
reduction VarAssign->Identifier = Expr ; 

state 94	input int
reduction VarAssign->Identifier = Expr ; 

state 94	input return
reduction VarAssign->Identifier = Expr ; 

state 94	input void
reduction VarAssign->Identifier = Expr ; 

state 94	input while
reduction VarAssign->Identifier = Expr ; 

state 94	input {
reduction VarAssign->Identifier = Expr ; 

state 94	input }
reduction VarAssign->Identifier = Expr ; 

state 95	input ;
shift state 139

state 96	input )
shift state 140

state 96	input +
shift state 110

state 96	input -
shift state 111

state 97	input (
shift state 65

state 97	input Digits
shift state 66

state 97	input Factor
shift state 68

state 97	input Identifier
shift state 69

state 97	input OperationExpr
shift state 70

state 97	input Term
shift state 72

state 97	input UnequalExpr
shift state 141

state 98	input (
shift state 65

state 98	input Digits
shift state 66

state 98	input Factor
shift state 68

state 98	input Identifier
shift state 69

state 98	input OperationExpr
shift state 70

state 98	input Term
shift state 72

state 98	input UnequalExpr
shift state 142

state 99	input (
shift state 65

state 99	input Digits
shift state 66

state 99	input Factor
shift state 68

state 99	input Identifier
shift state 69

state 99	input Term
shift state 143

state 100	input (
shift state 65

state 100	input Digits
shift state 66

state 100	input Factor
shift state 68

state 100	input Identifier
shift state 69

state 100	input Term
shift state 144

state 101	input ;
shift state 145

state 101	input Block
shift state 146

state 101	input Identifier
shift state 147

state 101	input Stmt
shift state 148

state 101	input Type
shift state 149

state 101	input VarAssign
shift state 150

state 101	input VarDecl
shift state 151

state 101	input VarDef
shift state 152

state 101	input VarStmt
shift state 153

state 101	input break
shift state 154

state 101	input continue
shift state 155

state 101	input if
shift state 156

state 101	input int
shift state 5

state 101	input return
shift state 157

state 101	input void
shift state 7

state 101	input while
shift state 158

state 101	input {
shift state 159

state 102	input (
shift state 65

state 102	input Digits
shift state 66

state 102	input Factor
shift state 160

state 102	input Identifier
shift state 69

state 103	input (
shift state 65

state 103	input Digits
shift state 66

state 103	input Factor
shift state 161

state 103	input Identifier
shift state 69

state 104	input (
shift state 65

state 104	input Digits
shift state 66

state 104	input Factor
shift state 68

state 104	input Identifier
shift state 69

state 104	input OperationExpr
shift state 162

state 104	input Term
shift state 72

state 105	input (
shift state 65

state 105	input Digits
shift state 66

state 105	input Factor
shift state 68

state 105	input Identifier
shift state 69

state 105	input OperationExpr
shift state 163

state 105	input Term
shift state 72

state 106	input (
shift state 65

state 106	input Digits
shift state 66

state 106	input Factor
shift state 68

state 106	input Identifier
shift state 69

state 106	input OperationExpr
shift state 164

state 106	input Term
shift state 72

state 107	input (
shift state 65

state 107	input Digits
shift state 66

state 107	input Factor
shift state 68

state 107	input Identifier
shift state 69

state 107	input OperationExpr
shift state 165

state 107	input Term
shift state 72

state 108	input )
shift state 166

state 108	input +
shift state 110

state 108	input -
shift state 111

state 109	input *
reduction Factor->( OperationExpr ) 

state 109	input +
reduction Factor->( OperationExpr ) 

state 109	input -
reduction Factor->( OperationExpr ) 

state 109	input /
reduction Factor->( OperationExpr ) 

state 109	input ;
reduction Factor->( OperationExpr ) 

state 110	input (
shift state 74

state 110	input Digits
shift state 75

state 110	input Factor
shift state 76

state 110	input Identifier
shift state 77

state 110	input Term
shift state 167

state 111	input (
shift state 74

state 111	input Digits
shift state 75

state 111	input Factor
shift state 76

state 111	input Identifier
shift state 77

state 111	input Term
shift state 168

state 112	input (
shift state 74

state 112	input Digits
shift state 75

state 112	input Factor
shift state 169

state 112	input Identifier
shift state 77

state 113	input (
shift state 74

state 113	input Digits
shift state 75

state 113	input Factor
shift state 170

state 113	input Identifier
shift state 77

state 114	input (
shift state 74

state 114	input Digits
shift state 75

state 114	input Factor
shift state 76

state 114	input Identifier
shift state 77

state 114	input OperationExpr
shift state 171

state 114	input Term
shift state 79

state 115	input !=
reduction Factor->Digits 

state 115	input *
reduction Factor->Digits 

state 115	input +
reduction Factor->Digits 

state 115	input -
reduction Factor->Digits 

state 115	input /
reduction Factor->Digits 

state 115	input ;
reduction Factor->Digits 

state 115	input <
reduction Factor->Digits 

state 115	input <=
reduction Factor->Digits 

state 115	input ==
reduction Factor->Digits 

state 115	input >
reduction Factor->Digits 

state 115	input >=
reduction Factor->Digits 

state 116	input !=
reduction Term->Factor 

state 116	input *
reduction Term->Factor 

state 116	input +
reduction Term->Factor 

state 116	input -
reduction Term->Factor 

state 116	input /
reduction Term->Factor 

state 116	input ;
reduction Term->Factor 

state 116	input <
reduction Term->Factor 

state 116	input <=
reduction Term->Factor 

state 116	input ==
reduction Term->Factor 

state 116	input >
reduction Term->Factor 

state 116	input >=
reduction Term->Factor 

state 117	input !=
reduction Factor->Identifier 

state 117	input *
reduction Factor->Identifier 

state 117	input +
reduction Factor->Identifier 

state 117	input -
reduction Factor->Identifier 

state 117	input /
reduction Factor->Identifier 

state 117	input ;
reduction Factor->Identifier 

state 117	input <
reduction Factor->Identifier 

state 117	input <=
reduction Factor->Identifier 

state 117	input ==
reduction Factor->Identifier 

state 117	input >
reduction Factor->Identifier 

state 117	input >=
reduction Factor->Identifier 

state 118	input !=
reduction UnequalExpr->OperationExpr 

state 118	input +
shift state 172

state 118	input -
shift state 173

state 118	input ;
reduction UnequalExpr->OperationExpr 

state 118	input <
reduction UnequalExpr->OperationExpr 

state 118	input <=
reduction UnequalExpr->OperationExpr 

state 118	input ==
reduction UnequalExpr->OperationExpr 

state 118	input >
reduction UnequalExpr->OperationExpr 

state 118	input >=
reduction UnequalExpr->OperationExpr 

state 119	input !=
reduction OperationExpr->Term 

state 119	input *
shift state 174

state 119	input +
reduction OperationExpr->Term 

state 119	input -
reduction OperationExpr->Term 

state 119	input /
shift state 175

state 119	input ;
reduction OperationExpr->Term 

state 119	input <
reduction OperationExpr->Term 

state 119	input <=
reduction OperationExpr->Term 

state 119	input ==
reduction OperationExpr->Term 

state 119	input >
reduction OperationExpr->Term 

state 119	input >=
reduction OperationExpr->Term 

state 120	input !=
reduction EqualExpr->EqualExpr != UnequalExpr 

state 120	input ;
reduction EqualExpr->EqualExpr != UnequalExpr 

state 120	input <
shift state 88

state 120	input <=
shift state 89

state 120	input ==
reduction EqualExpr->EqualExpr != UnequalExpr 

state 120	input >
shift state 90

state 120	input >=
shift state 91

state 121	input !=
reduction EqualExpr->EqualExpr == UnequalExpr 

state 121	input ;
reduction EqualExpr->EqualExpr == UnequalExpr 

state 121	input <
shift state 88

state 121	input <=
shift state 89

state 121	input ==
reduction EqualExpr->EqualExpr == UnequalExpr 

state 121	input >
shift state 90

state 121	input >=
shift state 91

state 122	input ;
reduction Expr->Identifier ( ) 

state 123	input )
shift state 176

state 124	input )
reduction IdentList->Identifier 

state 124	input ,
shift state 177

state 125	input (
shift state 74

state 125	input Digits
shift state 75

state 125	input Factor
shift state 76

state 125	input Identifier
shift state 77

state 125	input OperationExpr
shift state 178

state 125	input Term
shift state 79

state 126	input *
reduction Factor->Digits 

state 126	input +
reduction Factor->Digits 

state 126	input -
reduction Factor->Digits 

state 126	input /
reduction Factor->Digits 

state 126	input ;
reduction Factor->Digits 

state 126	input <
reduction Factor->Digits 

state 126	input <=
reduction Factor->Digits 

state 126	input >
reduction Factor->Digits 

state 126	input >=
reduction Factor->Digits 

state 127	input *
reduction Term->Factor 

state 127	input +
reduction Term->Factor 

state 127	input -
reduction Term->Factor 

state 127	input /
reduction Term->Factor 

state 127	input ;
reduction Term->Factor 

state 127	input <
reduction Term->Factor 

state 127	input <=
reduction Term->Factor 

state 127	input >
reduction Term->Factor 

state 127	input >=
reduction Term->Factor 

state 128	input *
reduction Factor->Identifier 

state 128	input +
reduction Factor->Identifier 

state 128	input -
reduction Factor->Identifier 

state 128	input /
reduction Factor->Identifier 

state 128	input ;
reduction Factor->Identifier 

state 128	input <
reduction Factor->Identifier 

state 128	input <=
reduction Factor->Identifier 

state 128	input >
reduction Factor->Identifier 

state 128	input >=
reduction Factor->Identifier 

state 129	input *
shift state 179

state 129	input +
reduction OperationExpr->OperationExpr + Term 

state 129	input -
reduction OperationExpr->OperationExpr + Term 

state 129	input /
shift state 180

state 129	input ;
reduction OperationExpr->OperationExpr + Term 

state 129	input <
reduction OperationExpr->OperationExpr + Term 

state 129	input <=
reduction OperationExpr->OperationExpr + Term 

state 129	input >
reduction OperationExpr->OperationExpr + Term 

state 129	input >=
reduction OperationExpr->OperationExpr + Term 

state 130	input *
shift state 179

state 130	input +
reduction OperationExpr->OperationExpr - Term 

state 130	input -
reduction OperationExpr->OperationExpr - Term 

state 130	input /
shift state 180

state 130	input ;
reduction OperationExpr->OperationExpr - Term 

state 130	input <
reduction OperationExpr->OperationExpr - Term 

state 130	input <=
reduction OperationExpr->OperationExpr - Term 

state 130	input >
reduction OperationExpr->OperationExpr - Term 

state 130	input >=
reduction OperationExpr->OperationExpr - Term 

state 131	input *
reduction Term->Term * Factor 

state 131	input +
reduction Term->Term * Factor 

state 131	input -
reduction Term->Term * Factor 

state 131	input /
reduction Term->Term * Factor 

state 131	input ;
reduction Term->Term * Factor 

state 132	input *
reduction Factor->Identifier 

state 132	input +
reduction Factor->Identifier 

state 132	input -
reduction Factor->Identifier 

state 132	input /
reduction Factor->Identifier 

state 132	input ;
reduction Factor->Identifier 

state 133	input *
reduction Term->Term / Factor 

state 133	input +
reduction Term->Term / Factor 

state 133	input -
reduction Term->Term / Factor 

state 133	input /
reduction Term->Term / Factor 

state 133	input ;
reduction Term->Term / Factor 

state 134	input !=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input +
shift state 172

state 134	input -
shift state 173

state 134	input ;
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input <
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input <=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input ==
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input >
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 134	input >=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 135	input !=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input +
shift state 172

state 135	input -
shift state 173

state 135	input ;
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input <
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input <=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input ==
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input >
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 135	input >=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 136	input !=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input +
shift state 172

state 136	input -
shift state 173

state 136	input ;
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input <
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input <=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input ==
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input >
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 136	input >=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 137	input !=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input +
shift state 172

state 137	input -
shift state 173

state 137	input ;
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input <
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input <=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input ==
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input >
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 137	input >=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 138	input ;
shift state 19

state 138	input Block
shift state 20

state 138	input Identifier
shift state 22

state 138	input Stmt
shift state 181

state 138	input Type
shift state 24

state 138	input VarAssign
shift state 39

state 138	input VarDecl
shift state 26

state 138	input VarDef
shift state 40

state 138	input VarStmt
shift state 28

state 138	input break
shift state 29

state 138	input continue
shift state 30

state 138	input if
shift state 31

state 138	input int
shift state 5

state 138	input return
shift state 32

state 138	input void
shift state 7

state 138	input while
shift state 33

state 138	input {
shift state 34

state 139	input ;
reduction VarDef->Type Identifier = Expr ; 

state 139	input Identifier
reduction VarDef->Type Identifier = Expr ; 

state 139	input break
reduction VarDef->Type Identifier = Expr ; 

state 139	input continue
reduction VarDef->Type Identifier = Expr ; 

state 139	input if
reduction VarDef->Type Identifier = Expr ; 

state 139	input int
reduction VarDef->Type Identifier = Expr ; 

state 139	input return
reduction VarDef->Type Identifier = Expr ; 

state 139	input void
reduction VarDef->Type Identifier = Expr ; 

state 139	input while
reduction VarDef->Type Identifier = Expr ; 

state 139	input {
reduction VarDef->Type Identifier = Expr ; 

state 139	input }
reduction VarDef->Type Identifier = Expr ; 

state 140	input !=
reduction Factor->( OperationExpr ) 

state 140	input )
reduction Factor->( OperationExpr ) 

state 140	input *
reduction Factor->( OperationExpr ) 

state 140	input +
reduction Factor->( OperationExpr ) 

state 140	input -
reduction Factor->( OperationExpr ) 

state 140	input /
reduction Factor->( OperationExpr ) 

state 140	input <
reduction Factor->( OperationExpr ) 

state 140	input <=
reduction Factor->( OperationExpr ) 

state 140	input ==
reduction Factor->( OperationExpr ) 

state 140	input >
reduction Factor->( OperationExpr ) 

state 140	input >=
reduction Factor->( OperationExpr ) 

state 141	input !=
reduction EqualExpr->EqualExpr != UnequalExpr 

state 141	input )
reduction EqualExpr->EqualExpr != UnequalExpr 

state 141	input <
shift state 104

state 141	input <=
shift state 105

state 141	input ==
reduction EqualExpr->EqualExpr != UnequalExpr 

state 141	input >
shift state 106

state 141	input >=
shift state 107

state 142	input !=
reduction EqualExpr->EqualExpr == UnequalExpr 

state 142	input )
reduction EqualExpr->EqualExpr == UnequalExpr 

state 142	input <
shift state 104

state 142	input <=
shift state 105

state 142	input ==
reduction EqualExpr->EqualExpr == UnequalExpr 

state 142	input >
shift state 106

state 142	input >=
shift state 107

state 143	input !=
reduction OperationExpr->OperationExpr + Term 

state 143	input )
reduction OperationExpr->OperationExpr + Term 

state 143	input *
shift state 102

state 143	input +
reduction OperationExpr->OperationExpr + Term 

state 143	input -
reduction OperationExpr->OperationExpr + Term 

state 143	input /
shift state 103

state 143	input <
reduction OperationExpr->OperationExpr + Term 

state 143	input <=
reduction OperationExpr->OperationExpr + Term 

state 143	input ==
reduction OperationExpr->OperationExpr + Term 

state 143	input >
reduction OperationExpr->OperationExpr + Term 

state 143	input >=
reduction OperationExpr->OperationExpr + Term 

state 144	input !=
reduction OperationExpr->OperationExpr - Term 

state 144	input )
reduction OperationExpr->OperationExpr - Term 

state 144	input *
shift state 102

state 144	input +
reduction OperationExpr->OperationExpr - Term 

state 144	input -
reduction OperationExpr->OperationExpr - Term 

state 144	input /
shift state 103

state 144	input <
reduction OperationExpr->OperationExpr - Term 

state 144	input <=
reduction OperationExpr->OperationExpr - Term 

state 144	input ==
reduction OperationExpr->OperationExpr - Term 

state 144	input >
reduction OperationExpr->OperationExpr - Term 

state 144	input >=
reduction OperationExpr->OperationExpr - Term 

state 145	input else
reduction Stmt->; 

state 145	input }
reduction Stmt->; 

state 146	input ;
shift state 145

state 146	input Block
shift state 146

state 146	input Identifier
shift state 147

state 146	input Stmt
shift state 182

state 146	input Type
shift state 149

state 146	input VarAssign
shift state 150

state 146	input VarDecl
shift state 151

state 146	input VarDef
shift state 152

state 146	input VarStmt
shift state 153

state 146	input break
shift state 154

state 146	input continue
shift state 155

state 146	input else
reduction Stmt->Block 

state 146	input if
shift state 156

state 146	input int
shift state 5

state 146	input return
shift state 157

state 146	input void
shift state 7

state 146	input while
shift state 158

state 146	input {
shift state 159

state 146	input }
reduction Stmt->Block 

state 147	input =
shift state 183

state 148	input else
shift state 184

state 148	input }
reduction Stmt->if ( RelationExpr ) Stmt 

state 149	input Identifier
shift state 185

state 150	input ;
reduction VarStmt->VarAssign 

state 150	input Identifier
reduction VarStmt->VarAssign 

state 150	input break
reduction VarStmt->VarAssign 

state 150	input continue
reduction VarStmt->VarAssign 

state 150	input else
reduction VarStmt->VarAssign 

state 150	input if
reduction VarStmt->VarAssign 

state 150	input int
reduction VarStmt->VarAssign 

state 150	input return
reduction VarStmt->VarAssign 

state 150	input void
reduction VarStmt->VarAssign 

state 150	input while
reduction VarStmt->VarAssign 

state 150	input {
reduction VarStmt->VarAssign 

state 150	input }
reduction VarStmt->VarAssign 

state 151	input ;
reduction VarStmt->VarDecl 

state 151	input Identifier
reduction VarStmt->VarDecl 

state 151	input break
reduction VarStmt->VarDecl 

state 151	input continue
reduction VarStmt->VarDecl 

state 151	input else
reduction VarStmt->VarDecl 

state 151	input if
reduction VarStmt->VarDecl 

state 151	input int
reduction VarStmt->VarDecl 

state 151	input return
reduction VarStmt->VarDecl 

state 151	input void
reduction VarStmt->VarDecl 

state 151	input while
reduction VarStmt->VarDecl 

state 151	input {
reduction VarStmt->VarDecl 

state 151	input }
reduction VarStmt->VarDecl 

state 152	input ;
reduction VarStmt->VarDef 

state 152	input Identifier
reduction VarStmt->VarDef 

state 152	input break
reduction VarStmt->VarDef 

state 152	input continue
reduction VarStmt->VarDef 

state 152	input else
reduction VarStmt->VarDef 

state 152	input if
reduction VarStmt->VarDef 

state 152	input int
reduction VarStmt->VarDef 

state 152	input return
reduction VarStmt->VarDef 

state 152	input void
reduction VarStmt->VarDef 

state 152	input while
reduction VarStmt->VarDef 

state 152	input {
reduction VarStmt->VarDef 

state 152	input }
reduction VarStmt->VarDef 

state 153	input ;
shift state 145

state 153	input Block
shift state 146

state 153	input Identifier
shift state 147

state 153	input Stmt
shift state 186

state 153	input Type
shift state 149

state 153	input VarAssign
shift state 150

state 153	input VarDecl
shift state 151

state 153	input VarDef
shift state 152

state 153	input VarStmt
shift state 153

state 153	input break
shift state 154

state 153	input continue
shift state 155

state 153	input else
reduction Stmt->VarStmt 

state 153	input if
shift state 156

state 153	input int
shift state 5

state 153	input return
shift state 157

state 153	input void
shift state 7

state 153	input while
shift state 158

state 153	input {
shift state 159

state 153	input }
reduction Stmt->VarStmt 

state 154	input ;
shift state 187

state 155	input ;
shift state 188

state 156	input (
shift state 189

state 157	input (
shift state 48

state 157	input ;
shift state 190

state 157	input Digits
shift state 50

state 157	input EqualExpr
shift state 51

state 157	input Expr
shift state 191

state 157	input Factor
shift state 53

state 157	input Identifier
shift state 54

state 157	input OperationExpr
shift state 55

state 157	input RelationExpr
shift state 56

state 157	input Term
shift state 57

state 157	input UnequalExpr
shift state 58

state 158	input (
shift state 192

state 159	input ;
shift state 19

state 159	input Block
shift state 20

state 159	input BlockItem
shift state 193

state 159	input Identifier
shift state 22

state 159	input Stmt
shift state 23

state 159	input Type
shift state 24

state 159	input VarAssign
shift state 25

state 159	input VarDecl
shift state 26

state 159	input VarDef
shift state 27

state 159	input VarStmt
shift state 28

state 159	input break
shift state 29

state 159	input continue
shift state 30

state 159	input if
shift state 31

state 159	input int
shift state 5

state 159	input return
shift state 32

state 159	input void
shift state 7

state 159	input while
shift state 33

state 159	input {
shift state 34

state 160	input !=
reduction Term->Term * Factor 

state 160	input )
reduction Term->Term * Factor 

state 160	input *
reduction Term->Term * Factor 

state 160	input +
reduction Term->Term * Factor 

state 160	input -
reduction Term->Term * Factor 

state 160	input /
reduction Term->Term * Factor 

state 160	input <
reduction Term->Term * Factor 

state 160	input <=
reduction Term->Term * Factor 

state 160	input ==
reduction Term->Term * Factor 

state 160	input >
reduction Term->Term * Factor 

state 160	input >=
reduction Term->Term * Factor 

state 161	input !=
reduction Term->Term / Factor 

state 161	input )
reduction Term->Term / Factor 

state 161	input *
reduction Term->Term / Factor 

state 161	input +
reduction Term->Term / Factor 

state 161	input -
reduction Term->Term / Factor 

state 161	input /
reduction Term->Term / Factor 

state 161	input <
reduction Term->Term / Factor 

state 161	input <=
reduction Term->Term / Factor 

state 161	input ==
reduction Term->Term / Factor 

state 161	input >
reduction Term->Term / Factor 

state 161	input >=
reduction Term->Term / Factor 

state 162	input !=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input )
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input +
shift state 99

state 162	input -
shift state 100

state 162	input <
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input <=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input ==
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input >
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 162	input >=
reduction UnequalExpr->UnequalExpr < OperationExpr 

state 163	input !=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input )
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input +
shift state 99

state 163	input -
shift state 100

state 163	input <
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input <=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input ==
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input >
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 163	input >=
reduction UnequalExpr->UnequalExpr <= OperationExpr 

state 164	input !=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input )
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input +
shift state 99

state 164	input -
shift state 100

state 164	input <
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input <=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input ==
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input >
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 164	input >=
reduction UnequalExpr->UnequalExpr > OperationExpr 

state 165	input !=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input )
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input +
shift state 99

state 165	input -
shift state 100

state 165	input <
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input <=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input ==
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input >
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 165	input >=
reduction UnequalExpr->UnequalExpr >= OperationExpr 

state 166	input )
reduction Factor->( OperationExpr ) 

state 166	input *
reduction Factor->( OperationExpr ) 

state 166	input +
reduction Factor->( OperationExpr ) 

state 166	input -
reduction Factor->( OperationExpr ) 

state 166	input /
reduction Factor->( OperationExpr ) 

state 167	input )
reduction OperationExpr->OperationExpr + Term 

state 167	input *
shift state 112

state 167	input +
reduction OperationExpr->OperationExpr + Term 

state 167	input -
reduction OperationExpr->OperationExpr + Term 

state 167	input /
shift state 113

state 168	input )
reduction OperationExpr->OperationExpr - Term 

state 168	input *
shift state 112

state 168	input +
reduction OperationExpr->OperationExpr - Term 

state 168	input -
reduction OperationExpr->OperationExpr - Term 

state 168	input /
shift state 113

state 169	input )
reduction Term->Term * Factor 

state 169	input *
reduction Term->Term * Factor 

state 169	input +
reduction Term->Term * Factor 

state 169	input -
reduction Term->Term * Factor 

state 169	input /
reduction Term->Term * Factor 

state 170	input )
reduction Term->Term / Factor 

state 170	input *
reduction Term->Term / Factor 

state 170	input +
reduction Term->Term / Factor 

state 170	input -
reduction Term->Term / Factor 

state 170	input /
reduction Term->Term / Factor 

state 171	input )
shift state 194

state 171	input +
shift state 110

state 171	input -
shift state 111

state 172	input (
shift state 114

state 172	input Digits
shift state 115

state 172	input Factor
shift state 116

state 172	input Identifier
shift state 117

state 172	input Term
shift state 195

state 173	input (
shift state 114

state 173	input Digits
shift state 115

state 173	input Factor
shift state 116

state 173	input Identifier
shift state 117

state 173	input Term
shift state 196

state 174	input (
shift state 114

state 174	input Digits
shift state 115

state 174	input Factor
shift state 197

state 174	input Identifier
shift state 117

state 175	input (
shift state 114

state 175	input Digits
shift state 115

state 175	input Factor
shift state 198

state 175	input Identifier
shift state 117

state 176	input ;
reduction Expr->Identifier ( IdentList ) 

state 177	input IdentList
shift state 199

state 177	input Identifier
shift state 124

state 178	input )
shift state 200

state 178	input +
shift state 110

state 178	input -
shift state 111

state 179	input (
shift state 125

state 179	input Digits
shift state 126

state 179	input Factor
shift state 201

state 179	input Identifier
shift state 128

state 180	input (
shift state 125

state 180	input Digits
shift state 126

state 180	input Factor
shift state 202

state 180	input Identifier
shift state 128

state 181	input }
reduction Stmt->while ( RelationExpr ) Stmt 

state 182	input else
reduction Stmt->Block Stmt 

state 182	input }
reduction Stmt->Block Stmt 

state 183	input (
shift state 48

state 183	input Digits
shift state 50

state 183	input EqualExpr
shift state 51

state 183	input Expr
shift state 203

state 183	input Factor
shift state 53

state 183	input Identifier
shift state 54

state 183	input OperationExpr
shift state 55

state 183	input RelationExpr
shift state 56

state 183	input Term
shift state 57

state 183	input UnequalExpr
shift state 58

state 184	input ;
shift state 19

state 184	input Block
shift state 20

state 184	input Identifier
shift state 22

state 184	input Stmt
shift state 204

state 184	input Type
shift state 24

state 184	input VarAssign
shift state 39

state 184	input VarDecl
shift state 26

state 184	input VarDef
shift state 40

state 184	input VarStmt
shift state 28

state 184	input break
shift state 29

state 184	input continue
shift state 30

state 184	input if
shift state 31

state 184	input int
shift state 5

state 184	input return
shift state 32

state 184	input void
shift state 7

state 184	input while
shift state 33

state 184	input {
shift state 34

state 185	input ;
shift state 205

state 185	input =
shift state 206

state 186	input else
reduction Stmt->VarStmt Stmt 

state 186	input }
reduction Stmt->VarStmt Stmt 

state 187	input else
reduction Stmt->break ; 

state 187	input }
reduction Stmt->break ; 

state 188	input else
reduction Stmt->continue ; 

state 188	input }
reduction Stmt->continue ; 

state 189	input (
shift state 65

state 189	input Digits
shift state 66

state 189	input EqualExpr
shift state 67

state 189	input Factor
shift state 68

state 189	input Identifier
shift state 69

state 189	input OperationExpr
shift state 70

state 189	input RelationExpr
shift state 207

state 189	input Term
shift state 72

state 189	input UnequalExpr
shift state 73

state 190	input else
reduction Stmt->return ; 

state 190	input }
reduction Stmt->return ; 

state 191	input ;
shift state 208

state 192	input (
shift state 65

state 192	input Digits
shift state 66

state 192	input EqualExpr
shift state 67

state 192	input Factor
shift state 68

state 192	input Identifier
shift state 69

state 192	input OperationExpr
shift state 70

state 192	input RelationExpr
shift state 209

state 192	input Term
shift state 72

state 192	input UnequalExpr
shift state 73

state 193	input }
shift state 210

state 194	input !=
reduction Factor->( OperationExpr ) 

state 194	input *
reduction Factor->( OperationExpr ) 

state 194	input +
reduction Factor->( OperationExpr ) 

state 194	input -
reduction Factor->( OperationExpr ) 

state 194	input /
reduction Factor->( OperationExpr ) 

state 194	input ;
reduction Factor->( OperationExpr ) 

state 194	input <
reduction Factor->( OperationExpr ) 

state 194	input <=
reduction Factor->( OperationExpr ) 

state 194	input ==
reduction Factor->( OperationExpr ) 

state 194	input >
reduction Factor->( OperationExpr ) 

state 194	input >=
reduction Factor->( OperationExpr ) 

state 195	input !=
reduction OperationExpr->OperationExpr + Term 

state 195	input *
shift state 174

state 195	input +
reduction OperationExpr->OperationExpr + Term 

state 195	input -
reduction OperationExpr->OperationExpr + Term 

state 195	input /
shift state 175

state 195	input ;
reduction OperationExpr->OperationExpr + Term 

state 195	input <
reduction OperationExpr->OperationExpr + Term 

state 195	input <=
reduction OperationExpr->OperationExpr + Term 

state 195	input ==
reduction OperationExpr->OperationExpr + Term 

state 195	input >
reduction OperationExpr->OperationExpr + Term 

state 195	input >=
reduction OperationExpr->OperationExpr + Term 

state 196	input !=
reduction OperationExpr->OperationExpr - Term 

state 196	input *
shift state 174

state 196	input +
reduction OperationExpr->OperationExpr - Term 

state 196	input -
reduction OperationExpr->OperationExpr - Term 

state 196	input /
shift state 175

state 196	input ;
reduction OperationExpr->OperationExpr - Term 

state 196	input <
reduction OperationExpr->OperationExpr - Term 

state 196	input <=
reduction OperationExpr->OperationExpr - Term 

state 196	input ==
reduction OperationExpr->OperationExpr - Term 

state 196	input >
reduction OperationExpr->OperationExpr - Term 

state 196	input >=
reduction OperationExpr->OperationExpr - Term 

state 197	input !=
reduction Term->Term * Factor 

state 197	input *
reduction Term->Term * Factor 

state 197	input +
reduction Term->Term * Factor 

state 197	input -
reduction Term->Term * Factor 

state 197	input /
reduction Term->Term * Factor 

state 197	input ;
reduction Term->Term * Factor 

state 197	input <
reduction Term->Term * Factor 

state 197	input <=
reduction Term->Term * Factor 

state 197	input ==
reduction Term->Term * Factor 

state 197	input >
reduction Term->Term * Factor 

state 197	input >=
reduction Term->Term * Factor 

state 198	input !=
reduction Term->Term / Factor 

state 198	input *
reduction Term->Term / Factor 

state 198	input +
reduction Term->Term / Factor 

state 198	input -
reduction Term->Term / Factor 

state 198	input /
reduction Term->Term / Factor 

state 198	input ;
reduction Term->Term / Factor 

state 198	input <
reduction Term->Term / Factor 

state 198	input <=
reduction Term->Term / Factor 

state 198	input ==
reduction Term->Term / Factor 

state 198	input >
reduction Term->Term / Factor 

state 198	input >=
reduction Term->Term / Factor 

state 199	input )
reduction IdentList->Identifier , IdentList 

state 200	input *
reduction Factor->( OperationExpr ) 

state 200	input +
reduction Factor->( OperationExpr ) 

state 200	input -
reduction Factor->( OperationExpr ) 

state 200	input /
reduction Factor->( OperationExpr ) 

state 200	input ;
reduction Factor->( OperationExpr ) 

state 200	input <
reduction Factor->( OperationExpr ) 

state 200	input <=
reduction Factor->( OperationExpr ) 

state 200	input >
reduction Factor->( OperationExpr ) 

state 200	input >=
reduction Factor->( OperationExpr ) 

state 201	input *
reduction Term->Term * Factor 

state 201	input +
reduction Term->Term * Factor 

state 201	input -
reduction Term->Term * Factor 

state 201	input /
reduction Term->Term * Factor 

state 201	input ;
reduction Term->Term * Factor 

state 201	input <
reduction Term->Term * Factor 

state 201	input <=
reduction Term->Term * Factor 

state 201	input >
reduction Term->Term * Factor 

state 201	input >=
reduction Term->Term * Factor 

state 202	input *
reduction Term->Term / Factor 

state 202	input +
reduction Term->Term / Factor 

state 202	input -
reduction Term->Term / Factor 

state 202	input /
reduction Term->Term / Factor 

state 202	input ;
reduction Term->Term / Factor 

state 202	input <
reduction Term->Term / Factor 

state 202	input <=
reduction Term->Term / Factor 

state 202	input >
reduction Term->Term / Factor 

state 202	input >=
reduction Term->Term / Factor 

state 203	input ;
shift state 211

state 204	input }
reduction Stmt->if ( RelationExpr ) Stmt else Stmt 

state 205	input ;
reduction VarDecl->Type Identifier ; 

state 205	input Identifier
reduction VarDecl->Type Identifier ; 

state 205	input break
reduction VarDecl->Type Identifier ; 

state 205	input continue
reduction VarDecl->Type Identifier ; 

state 205	input else
reduction VarDecl->Type Identifier ; 

state 205	input if
reduction VarDecl->Type Identifier ; 

state 205	input int
reduction VarDecl->Type Identifier ; 

state 205	input return
reduction VarDecl->Type Identifier ; 

state 205	input void
reduction VarDecl->Type Identifier ; 

state 205	input while
reduction VarDecl->Type Identifier ; 

state 205	input {
reduction VarDecl->Type Identifier ; 

state 205	input }
reduction VarDecl->Type Identifier ; 

state 206	input (
shift state 48

state 206	input Digits
shift state 50

state 206	input EqualExpr
shift state 51

state 206	input Expr
shift state 212

state 206	input Factor
shift state 53

state 206	input Identifier
shift state 54

state 206	input OperationExpr
shift state 55

state 206	input RelationExpr
shift state 56

state 206	input Term
shift state 57

state 206	input UnequalExpr
shift state 58

state 207	input )
shift state 213

state 208	input else
reduction Stmt->return Expr ; 

state 208	input }
reduction Stmt->return Expr ; 

state 209	input )
shift state 214

state 210	input ;
reduction Block->{ BlockItem } 

state 210	input Identifier
reduction Block->{ BlockItem } 

state 210	input break
reduction Block->{ BlockItem } 

state 210	input continue
reduction Block->{ BlockItem } 

state 210	input else
reduction Block->{ BlockItem } 

state 210	input if
reduction Block->{ BlockItem } 

state 210	input int
reduction Block->{ BlockItem } 

state 210	input return
reduction Block->{ BlockItem } 

state 210	input void
reduction Block->{ BlockItem } 

state 210	input while
reduction Block->{ BlockItem } 

state 210	input {
reduction Block->{ BlockItem } 

state 210	input }
reduction Block->{ BlockItem } 

state 211	input ;
reduction VarAssign->Identifier = Expr ; 

state 211	input Identifier
reduction VarAssign->Identifier = Expr ; 

state 211	input break
reduction VarAssign->Identifier = Expr ; 

state 211	input continue
reduction VarAssign->Identifier = Expr ; 

state 211	input else
reduction VarAssign->Identifier = Expr ; 

state 211	input if
reduction VarAssign->Identifier = Expr ; 

state 211	input int
reduction VarAssign->Identifier = Expr ; 

state 211	input return
reduction VarAssign->Identifier = Expr ; 

state 211	input void
reduction VarAssign->Identifier = Expr ; 

state 211	input while
reduction VarAssign->Identifier = Expr ; 

state 211	input {
reduction VarAssign->Identifier = Expr ; 

state 211	input }
reduction VarAssign->Identifier = Expr ; 

state 212	input ;
shift state 215

state 213	input ;
shift state 145

state 213	input Block
shift state 146

state 213	input Identifier
shift state 147

state 213	input Stmt
shift state 216

state 213	input Type
shift state 149

state 213	input VarAssign
shift state 150

state 213	input VarDecl
shift state 151

state 213	input VarDef
shift state 152

state 213	input VarStmt
shift state 153

state 213	input break
shift state 154

state 213	input continue
shift state 155

state 213	input if
shift state 156

state 213	input int
shift state 5

state 213	input return
shift state 157

state 213	input void
shift state 7

state 213	input while
shift state 158

state 213	input {
shift state 159

state 214	input ;
shift state 145

state 214	input Block
shift state 146

state 214	input Identifier
shift state 147

state 214	input Stmt
shift state 217

state 214	input Type
shift state 149

state 214	input VarAssign
shift state 150

state 214	input VarDecl
shift state 151

state 214	input VarDef
shift state 152

state 214	input VarStmt
shift state 153

state 214	input break
shift state 154

state 214	input continue
shift state 155

state 214	input if
shift state 156

state 214	input int
shift state 5

state 214	input return
shift state 157

state 214	input void
shift state 7

state 214	input while
shift state 158

state 214	input {
shift state 159

state 215	input ;
reduction VarDef->Type Identifier = Expr ; 

state 215	input Identifier
reduction VarDef->Type Identifier = Expr ; 

state 215	input break
reduction VarDef->Type Identifier = Expr ; 

state 215	input continue
reduction VarDef->Type Identifier = Expr ; 

state 215	input else
reduction VarDef->Type Identifier = Expr ; 

state 215	input if
reduction VarDef->Type Identifier = Expr ; 

state 215	input int
reduction VarDef->Type Identifier = Expr ; 

state 215	input return
reduction VarDef->Type Identifier = Expr ; 

state 215	input void
reduction VarDef->Type Identifier = Expr ; 

state 215	input while
reduction VarDef->Type Identifier = Expr ; 

state 215	input {
reduction VarDef->Type Identifier = Expr ; 

state 215	input }
reduction VarDef->Type Identifier = Expr ; 

state 216	input else
reduction Stmt->if ( RelationExpr ) Stmt shift state 218

state 216	input }
reduction Stmt->if ( RelationExpr ) Stmt 

state 217	input else
reduction Stmt->while ( RelationExpr ) Stmt 

state 217	input }
reduction Stmt->while ( RelationExpr ) Stmt 

state 218	input ;
shift state 145

state 218	input Block
shift state 146

state 218	input Identifier
shift state 147

state 218	input Stmt
shift state 219

state 218	input Type
shift state 149

state 218	input VarAssign
shift state 150

state 218	input VarDecl
shift state 151

state 218	input VarDef
shift state 152

state 218	input VarStmt
shift state 153

state 218	input break
shift state 154

state 218	input continue
shift state 155

state 218	input if
shift state 156

state 218	input int
shift state 5

state 218	input return
shift state 157

state 218	input void
shift state 7

state 218	input while
shift state 158

state 218	input {
shift state 159

state 219	input else
reduction Stmt->if ( RelationExpr ) Stmt else Stmt 

state 219	input }
reduction Stmt->if ( RelationExpr ) Stmt else Stmt 

